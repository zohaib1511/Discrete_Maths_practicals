#include <iostream>
#include <unordered_set>
#include <vector>

class Set {
private:
    std::unordered_set<int> elements;

public:
    Set(std::unordered_set<int> inputElements) {
        elements = inputElements;
    }

    Set unionSet(const Set& otherSet) const {
        std::unordered_set<int> result(elements);
        result.insert(otherSet.elements.begin(), otherSet.elements.end());
        return Set(result);
    }

    Set intersectionSet(const Set& otherSet) const {
        std::unordered_set<int> result;
        for (const auto& element : elements) {
            if (otherSet.elements.count(element) > 0)
                result.insert(element);
        }
        return Set(result);
    }

    void printSet() const {
        for (const auto& element : elements) {
            std::cout << element << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    Set set1({2,4,6,8,10});
    Set set2({1,3,5,7,9});
    Set set3({2,3,4,5,6});

    Set unionSet = set1.unionSet(set2);
    Set intersectionSet = set1.intersectionSet(set3);

    std::cout << "Union: ";
    unionSet.printSet();

    std::cout << "Intersection: ";
    intersectionSet.printSet();

    return 0;
}
